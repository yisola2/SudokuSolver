\documentclass[12pt,a4paper]{report}

% Packages
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{tikz}
\usepackage{float}
\usepackage{hyperref}
\usepackage{caption}
\usepackage{subcaption}
\usepackage[margin=2.5cm]{geometry}

% Code listing style
\lstset{
    basicstyle=\ttfamily\small,
    breaklines=true,
    commentstyle=\color{green!60!black},
    keywordstyle=\color{blue},
    stringstyle=\color{purple},
    numberstyle=\tiny\color{gray},
    numbers=left,
    frame=single,
    frameround=tttt,
    showstringspaces=false,
    tabsize=2
}

\title{
    \Huge{Sudoku Solver}\\
    \Large{Software Engineering Project Report}
}
\author{[Your Name]}
\date{\today}

\begin{document}

\maketitle
\tableofcontents

\chapter{Introduction}

\section{Project Overview}
This project implements a Sudoku solver that uses deduction rules to solve Sudoku puzzles. The solver employs three different levels of deduction rules with increasing complexity, combined with user interaction when needed. The implementation follows object-oriented principles and utilizes multiple design patterns to ensure maintainability and extensibility.

\section{Problem Statement}
Sudoku is a logic-based number-placement puzzle. The objective is to fill a 9×9 grid with digits so that each column, each row, and each of the nine 3×3 boxes contains all of the digits from 1 to 9. The challenge in implementing a Sudoku solver lies not just in finding a solution, but in doing so through logical deduction steps that mirror human solving techniques.

The key requirements for this project include:
\begin{itemize}
    \item Implementation of three distinct deduction rules (DR1, DR2, DR3)
    \item Proper handling of the input file format
    \item Implementation of at least four design patterns
    \item User interaction when deduction rules cannot progress
    \item Proper error handling and validation
\end{itemize}

\section{Objectives}
The main objectives of this project are:
\begin{itemize}
    \item Develop a robust Sudoku solver using deduction rules
    \item Implement clean, maintainable code following software engineering principles
    \item Utilize appropriate design patterns to solve common design challenges
    \item Create a user-friendly interface for puzzle input and solving
    \item Ensure proper validation and error handling throughout the solution
    \item Demonstrate understanding of object-oriented design principles
\end{itemize}

\chapter{Requirements Analysis}

\section{Functional Requirements}

\subsection{Core Functionality}
\begin{itemize}
    \item Load Sudoku puzzles from text files in specified format
    \item Apply deduction rules in sequence (DR1 → DR2 → DR3)
    \item Request user input when deduction rules cannot progress
    \item Validate moves and puzzle states
    \item Save solved puzzles to output files
\end{itemize}

\subsection{Deduction Rules}
\begin{itemize}
    \item DR1: Implement Single Candidate rule
    \item DR2: Implement Hidden Singles rule
    \item DR3: Implement Locked Candidates rule
    \item Apply rules sequentially until no further progress can be made
\end{itemize}

\subsection{Input/Output}
\begin{itemize}
    \item Read comma-separated puzzle files
    \item Handle 0s as empty cells
    \item Validate input file format
    \item Generate solution files
    \item Provide clear feedback during solving process
\end{itemize}

\section{Non-functional Requirements}

\subsection{Design Quality}
\begin{itemize}
    \item Implement minimum of four design patterns
    \item Follow object-oriented design principles
    \item Ensure code modularity and reusability
    \item Maintain clear separation of concerns
\end{itemize}

\subsection{Performance}
\begin{itemize}
    \item Efficient candidate management
    \item Minimal memory usage
    \item Quick response time for rule application
\end{itemize}

\subsection{Maintainability}
\begin{itemize}
    \item Clear code structure
    \item Comprehensive documentation
    \item Extensible design for future improvements
    \item Easy to add new solving strategies
\end{itemize}

\section{Project Constraints}
\begin{itemize}
    \item Implementation must be in Java
    \item Must use linear array representation for the grid
    \item Must follow specified input file format
    \item Must handle inconsistencies gracefully
\end{itemize}
